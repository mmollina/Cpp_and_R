```{}
```cpp #include <iostream.h>
dat<-read.table("mouse.txt")
combn(1:ncol(dat))
combn(1:ncol(dat),2)
id<-combn(1:ncol(dat),2)
apply(id, 2, function(x) table(dat[,x[1]],dat[,x[2]]))
apply(id, 2, function(x) table(dat[,x[1]],dat[,x[2]][3:3]))
apply(id, 2, function(x) table(dat[,x[1]],dat[,x[2]][2:3]))
apply(id, 2, function(x) table(dat[,x[1]],dat[,x[2]])[2:3])
apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
as.dist(rec
)
as.dist(rec)
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
source("simulate_diploid_populations.R")
source("simulate_diploid_populations.R")
dat.bc<-sim.pop.bc(n.ind = n.ind, n.mrk = n.mrk, ch.len = ch.len, missing = mis, n.ch = 1, verbose = FALSE)
dat.bc<-sim.pop.bc(n.ind = n.ind, n.mrk = 1000, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 1000, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc
require(onemap)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 1000, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc
dim(dat.bc$geno)
id<-combn(1:ncol(dat),2)
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
rec
dat<-dat.bc$geno
id<-combn(1:ncol(dat),2)
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
source("simulate_diploid_populations.R")
require(onemap)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 500, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc
write.table(x=dat, file = "fake_bc.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = " ")
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
dat<-dat.bc$geno
rec<-matrix(NA,ncol(dat), ncol(dat))
rec<-matrix(NA,ncol(dat), ncol(dat))
for(i in 1:(ncol(dat)-1){
for(j in i:ncol(dat)){
rec[i,j]<-sum(table(dat[,i], dat[,j])[2:3])/nrow(dat)
}
}
for(i in 1:(ncol(dat)-1){
for(i in 1:(ncol(dat)-1)){
for(j in i:ncol(dat)){
rec[i,j]<-sum(table(dat[,i], dat[,j])[2:3])/nrow(dat)
}
}
$ ./bcest
$ Enter the number of markers: 14
$ Enter the number of individuals: 103
$ Enter the name of the input file mouse.txt
y<-read.table(file = "rec_cpp.txt")
require(fields)
image.plot(y)
y[1:10,1:10]
image(y)
image.plot(as.matrix(y))
image.plot(rec)
rec[1:10,1:10]
image.plot(rec, rev(tim.colors()))
image.plot(rec, rev(tim.colors()))
rec[is.na(rec)]=.5
image.plot(rec, rev(tim.colors()))
image.plot(rec)
image.plot(rec, rev(tim.colors())   )
image.plot(rec, col=rev(tim.colors()))
image.plot(as.matrix(y), col=rev(tim.colors()) )
image.plot(rec, col=rev(tim.colors()))
image.plot(as.matrix(y), col=rev(tim.colors()) )
y<-read.table(file = "rec_cpp.txt")
image.plot(as.matrix(y), col=rev(tim.colors()) )
image.plot(rec, col=rev(tim.colors()))
rec[1:10,1:10]
y[1:10,1:10]
sum(table(dat[,i], dat[,j])
)
table(dat[,i], dat[,j])
table(dat[,i], dat[,j])[2:3]
source("simulate_diploid_populations.R")
require(onemap)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 100, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc
dat<-dat.bc$geno
write.table(x=dat, file = "fake_bc.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = " ")
#using for
rec<-matrix(NA,ncol(dat), ncol(dat))
for(i in 1:(ncol(dat)-1)){
for(j in (i-1):ncol(dat)){
rec[i,j]<-sum(table(dat[,i], dat[,j])[2:3])/nrow(dat)
}
}
rec<-matrix(NA,ncol(dat), ncol(dat))
for(i in 1:(ncol(dat)-1)){
for(j in (i+1):ncol(dat)){
rec[i,j]<-sum(table(dat[,i], dat[,j])[2:3])/nrow(dat)
}
}
require(fields)
image.plot(rec, col=rev(tim.colors()))
y<-read.table(file = "rec_cpp.txt")
image.plot(as.matrix(y), col=rev(tim.colors()) )
image.plot(rec, col=rev(tim.colors()))
image.plot(as.matrix(y), col=rev(tim.colors()) )
source("simulate_diploid_populations.R")
require(onemap)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 500, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
dat.bc
dat<-dat.bc$geno
write.table(x=dat, file = "fake_bc.txt", row.names = FALSE, col.names = FALSE, quote = FALSE, sep = " ")
#using for
rec<-matrix(NA,ncol(dat), ncol(dat))
for(i in 1:(ncol(dat)-1)){
for(j in (i+1):ncol(dat)){
rec[i,j]<-sum(table(dat[,i], dat[,j])[2:3])/nrow(dat)
}
}
require(fields)
image.plot(rec, col=rev(tim.colors()))
y<-read.table(file = "rec_cpp.txt")
image.plot(as.matrix(y), col=rev(tim.colors()) )
id<-combn(1:ncol(dat),2)
dat<-read.table("mouse.txt")
id<-combn(1:ncol(dat),2)
rec<-apply(id, 2, function(x) sum(table(dat[,x[1]],dat[,x[2]])[2:3])/nrow(dat))
rec
id
apply(id, 2, collapse="-")
apply(id, 2, paste, collapse="-")
names(rec)<-apply(id, 2, paste, collapse="-")
rec
rec
choose(500,2)
install.packages("inline")
require(Rcpp)
ourceCpp("rcpp_source_example.cpp")
sourceCpp("rcpp_source_example.cpp")
sourceCpp("rcpp_source_example.cpp")
sourceCpp("rcpp_source_example.cpp")
system.time(rec<-est_bc(dat.bc.t))
source("simulate_diploid_populations.R")
require(onemap)
dat.bc<-sim.pop.bc(n.ind = 250, n.mrk = 5000, ch.len = 200, missing = 0, n.ch = 1, verbose = FALSE)
sourceCpp("rcpp_source_example.cpp")
dat.bc
dat.bc.t<-dat.bc$geno
system.time(rec<-est_bc_inline(dat.bc.t))
src<-'
Rcpp::NumericMatrix geno(genoR);
int n_ind = geno.nrow();
int n_mar = geno.ncol();
Rcpp::NumericMatrix rec(n_mar, n_mar);
double ct;
for (int i = 0; i < (n_mar-1); i++)
{
for (int j = (i+1); j < n_mar; j++)
{
ct=0.0;
for(int k=0; k < n_ind; k++)
{
if(geno(k,i)!=geno(k,j))
ct++;
}
rec(j,i)=rec(i,j)=ct/n_ind;
}
}
return(rec);
'
require(Rcpp)
require(inline)
est_bc_inline <- cxxfunction(signature(genoR = "numeric"), body = src, plugin="Rcpp")
dat<-as.matrix(read.table("mouse.txt"))
rec<-est_bc_inline(dat)
require(fields)
image.plot(rec, col=rev(tim.colors()))
dat.bc
dat.bc.t<-dat.bc$geno
system.time(rec<-est_bc_inline(dat.bc.t))
choose(5000, 2)
image.plot(rec, col=rev(tim.colors()))
require(Rcpp)
sourceCpp("rcpp_source_example.cpp")
system.time(rec<-est_bc_source(dat.bc.t))
choose(5000, 2)
image.plot(rec, col=rev(tim.colors()))
install.packages("devtools")
install.packages("rversions")
install.packages("rversions")
install.packages("devtools")
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
require(devtools)
create("rfpack")
create(path = "~/repos/rfpack")
create(path = "~/repos/rfpack")
